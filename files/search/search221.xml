Python Programming:@0.676785:0.958597:0.830609:0.958597:0.830609:0.941370:0.676785:0.941370:0.010924:0.008189:0.004553:0.009106:0.009106:0.009106:0.004553:0.010924:0.005454:0.009106:0.009106:0.005454:0.009106:0.013643:0.013643:0.003636:0.009106:0.009106
219:@0.866633:0.958672:0.893116:0.958672:0.893116:0.942265:0.866633:0.942265:0.008828:0.008828:0.008828
• •:@0.094242:0.057868:0.094242:0.057868:0.094242:0.042408:0.094242:0.042408:0.004095:-0.011628:0.007534
  Dropping: :@0.119465:0.058259:0.201968:0.058259:0.201968:0.041612:0.119465:0.041612:0.004520:-0.004520:0.012071:0.006460:0.010007:0.010154:0.010154:0.004651:0.009909:0.010138:0.004438:0.004520
Dropping involves removing rows or columns containing missing values. This method is useful when :@0.203312:0.058259:0.946155:0.058259:0.946155:0.041852:0.203312:0.041852:0.011481:0.005480:0.009598:0.009630:0.009630:0.003964:0.009270:0.009647:0.005806:0.003964:0.009270:0.007750:0.009598:0.003964:0.007752:0.008566:0.006944:0.005814:0.005477:0.008566:0.014102:0.009598:0.007845:0.003964:0.009270:0.009647:0.005814:0.005477:0.009598:0.011841:0.006944:0.005814:0.009598:0.005700:0.005803:0.007567:0.009598:0.003964:0.009270:0.014102:0.009270:0.006944:0.005814:0.007567:0.009598:0.009270:0.005552:0.008336:0.003964:0.009270:0.003964:0.009270:0.009647:0.005801:0.014102:0.003964:0.006944:0.006944:0.003964:0.009270:0.009647:0.005829:0.007549:0.008336:0.003964:0.009270:0.008566:0.006944:0.003554:0.005814:0.008582:0.009270:0.003964:0.006944:0.005814:0.014102:0.008566:0.005552:0.009270:0.009598:0.009647:0.005814:0.003964:0.006944:0.005814:0.009270:0.006944:0.008566:0.005126:0.009270:0.003964:0.005814:0.011841:0.009270:0.008566:0.009270:0.004488
 :@0.941656:0.058259:0.946143:0.058259:0.946143:0.041852:0.941656:0.041852:0.004488
the missing values are sparse and dropping them doesn't significantly impact the analysis.:@0.119472:0.077191:0.765733:0.077191:0.765733:0.060783:0.119472:0.060783:0.005552:0.009270:0.008566:0.004488:0.014102:0.003964:0.006944:0.006944:0.003964:0.009270:0.009647:0.004488:0.007560:0.008336:0.003964:0.009270:0.008566:0.006944:0.004488:0.008336:0.005477:0.008566:0.004488:0.006944:0.009416:0.008336:0.005803:0.006944:0.008566:0.004488:0.008336:0.009270:0.009647:0.004488:0.009647:0.005470:0.009598:0.009630:0.009630:0.003964:0.009270:0.009647:0.004488:0.005552:0.009270:0.008566:0.014102:0.004488:0.009647:0.009598:0.008566:0.006944:0.008431:0.003767:0.005552:0.004488:0.006944:0.003964:0.009647:0.009270:0.003964:0.004545:0.004545:0.007567:0.008336:0.009270:0.005552:0.003964:0.007927:0.004488:0.003964:0.014102:0.009413:0.008336:0.007567:0.005552:0.004488:0.005552:0.009270:0.008566:0.004488:0.008336:0.009270:0.008336:0.003964:0.007927:0.006944:0.003964:0.006944:0.003554
•:@0.086709:0.099308:0.090803:0.099308:0.090803:0.083847:0.086709:0.083847:0.004095
  Pandas provides the :@0.119465:0.099699:0.269099:0.099699:0.269099:0.083292:0.119465:0.083292:0.004488:-0.004488:0.008644:0.008336:0.009270:0.009647:0.008336:0.006944:0.004455:0.009630:0.005477:0.009598:0.007845:0.003964:0.009647:0.008566:0.006944:0.004455:0.005552:0.009270:0.008566:0.004488
dropna() :@0.269067:0.103235:0.357509:0.103235:0.357509:0.088956:0.269067:0.088956:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827
function to drop rows or columns with missing values. For example, you can drop :@0.357460:0.099699:0.946153:0.099699:0.946153:0.083292:0.357460:0.083292:0.005126:0.009270:0.009270:0.007567:0.005552:0.003964:0.009598:0.009270:0.004455:0.005421:0.009598:0.004455:0.009647:0.005475:0.009598:0.009630:0.004455:0.005477:0.009598:0.011841:0.006944:0.004455:0.009598:0.005700:0.004455:0.007567:0.009598:0.003964:0.009270:0.014102:0.009270:0.006944:0.004465:0.011841:0.003964:0.005552:0.009270:0.004455:0.014102:0.003964:0.006944:0.006944:0.003964:0.009270:0.009647:0.004476:0.007549:0.008336:0.003964:0.009270:0.008566:0.006944:0.003554:0.004455:0.007993:0.009598:0.005700:0.004455:0.008566:0.007518:0.008336:0.014102:0.009630:0.003964:0.008566:0.003554:0.004455:0.007845:0.009598:0.009270:0.004455:0.007567:0.008336:0.009270:0.004455:0.009647:0.005475:0.009598:0.009630:0.004488
rows with any missing values in a DataFrame :@0.119469:0.118630:0.444827:0.118630:0.444827:0.102223:0.119469:0.102223:0.005478:0.009598:0.011841:0.006944:0.004488:0.011841:0.003964:0.005552:0.009270:0.004488:0.008336:0.009270:0.007927:0.004488:0.014102:0.003964:0.006944:0.006944:0.003964:0.009270:0.009647:0.004488:0.007549:0.008336:0.003964:0.009270:0.008566:0.006944:0.004488:0.003964:0.009270:0.004488:0.008336:0.004488:0.011481:0.008336:0.005552:0.008336:0.007993:0.005700:0.008336:0.014102:0.008566:0.004488
df:@0.444821:0.122166:0.464474:0.122166:0.464474:0.107887:0.444821:0.107887:0.009827:0.009827
 using :@0.464474:0.118630:0.512544:0.118630:0.512544:0.102223:0.464474:0.102223:0.004488:0.009270:0.006944:0.003964:0.009270:0.009647:0.004488
df.dropna():@0.512544:0.122166:0.620640:0.122166:0.620640:0.107887:0.512544:0.107887:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827
.:@0.620656:0.118630:0.624211:0.118630:0.624211:0.102223:0.620656:0.102223:0.003554
• •:@0.094246:0.140742:0.094246:0.140742:0.094246:0.125282:0.094246:0.125282:0.004095:-0.011628:0.007534
 :@0.119465:0.141139:0.123953:0.141139:0.123953:0.124732:0.119465:0.124732:0.004488
Interpolation: :@0.119465:0.141139:0.229774:0.141139:0.229774:0.124492:0.119465:0.124492:0.005192:0.009909:0.006307:0.008861:0.006519:0.010154:0.010007:0.004651:0.008811:0.006371:0.004651:0.010007:0.009909:0.004438:0.004520
Interpolation involves estimating missing values based on existing data. Pandas provides interpolation :@0.227938:0.141139:0.946126:0.141139:0.946126:0.124732:0.227938:0.124732:0.004357:0.009270:0.005423:0.008566:0.005700:0.009630:0.009598:0.003964:0.008336:0.005552:0.003964:0.009598:0.009270:0.002627:0.003964:0.009270:0.007750:0.009598:0.003964:0.007750:0.008566:0.006944:0.002637:0.008566:0.006944:0.005552:0.003964:0.014102:0.008336:0.005552:0.003964:0.009270:0.009647:0.002637:0.014102:0.003964:0.006944:0.006944:0.003964:0.009270:0.009647:0.002657:0.007550:0.008336:0.003964:0.009270:0.008566:0.006944:0.002637:0.009413:0.008336:0.006944:0.008566:0.009647:0.002637:0.009598:0.009270:0.002637:0.008566:0.007518:0.003964:0.006944:0.005552:0.003964:0.009270:0.009647:0.002637:0.009647:0.008336:0.005552:0.008336:0.003554:0.002624:0.008646:0.008336:0.009270:0.009647:0.008336:0.006944:0.002637:0.009630:0.005475:0.009598:0.007845:0.003964:0.009647:0.008566:0.006944:0.002637:0.003964:0.009270:0.005424:0.008566:0.005700:0.009630:0.009598:0.003964:0.008336:0.005552:0.003964:0.009598:0.009270:0.004488
methods such as :@0.119465:0.160070:0.246281:0.160070:0.246281:0.143663:0.119465:0.143663:0.014102:0.008566:0.005552:0.009270:0.009598:0.009647:0.006944:0.005159:0.006944:0.009270:0.007567:0.009270:0.005159:0.008336:0.006944:0.004488
interpolate():@0.246953:0.163606:0.374717:0.163606:0.374717:0.149327:0.246953:0.149327:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009842:0.009827:0.009827:0.009827:0.009827
 to estimate missing values. For example, you can perform linear interpolation :@0.374717:0.160070:0.946174:0.160070:0.946174:0.143663:0.374717:0.143663:0.005159:0.005421:0.009598:0.005159:0.008566:0.006944:0.005552:0.003964:0.014102:0.008336:0.005429:0.008566:0.005159:0.014102:0.003964:0.006944:0.006944:0.003964:0.009270:0.009647:0.005174:0.007549:0.008336:0.003964:0.009270:0.008566:0.006944:0.003554:0.005159:0.007993:0.009598:0.005700:0.005159:0.008566:0.007518:0.008336:0.014102:0.009630:0.003964:0.008566:0.003554:0.005159:0.007845:0.009598:0.009270:0.005159:0.007567:0.008336:0.009270:0.005149:0.009630:0.008566:0.006003:0.005126:0.009598:0.005660:0.014102:0.005159:0.003964:0.003964:0.009270:0.008566:0.008336:0.005700:0.005149:0.003964:0.009270:0.005424:0.008566:0.005700:0.009630:0.009598:0.003964:0.008336:0.005552:0.003964:0.009598:0.009270:0.004488
on a DataFrame :@0.119465:0.179002:0.239550:0.179002:0.239550:0.162595:0.119465:0.162595:0.009598:0.009270:0.004995:0.008336:0.004995:0.011481:0.008336:0.005552:0.008336:0.007993:0.005700:0.008336:0.014102:0.008566:0.004488
df:@0.240041:0.182537:0.259695:0.182537:0.259695:0.168258:0.240041:0.168258:0.009827:0.009827
 using :@0.259695:0.179002:0.308272:0.179002:0.308272:0.162595:0.259695:0.162595:0.004995:0.009270:0.006944:0.003964:0.009270:0.009647:0.004488
df.interpolate():@0.308780:0.182537:0.466010:0.182537:0.466010:0.168258:0.308780:0.168258:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827:0.009827
. This method is particularly useful for time series or ordered data :@0.466043:0.179002:0.946137:0.179002:0.946137:0.162595:0.466043:0.162595:0.003554:0.004995:0.008582:0.009270:0.003964:0.006944:0.004995:0.014102:0.008566:0.005552:0.009270:0.009598:0.009647:0.004995:0.003964:0.006944:0.004995:0.009413:0.008336:0.006161:0.005552:0.003964:0.007567:0.009270:0.003964:0.008336:0.005700:0.003964:0.007927:0.004987:0.009270:0.006944:0.008566:0.005126:0.009270:0.003964:0.004995:0.005126:0.009598:0.005700:0.004987:0.005552:0.003964:0.014102:0.008566:0.004995:0.006944:0.008566:0.005700:0.003964:0.008566:0.006944:0.004995:0.009598:0.005700:0.004987:0.009598:0.005477:0.009647:0.008566:0.005475:0.008566:0.009647:0.004995:0.009647:0.008336:0.005552:0.008336:0.004488
where missing values can be inferred from neighbouring values.:@0.119465:0.197933:0.578494:0.197933:0.578494:0.181526:0.119465:0.181526:0.011841:0.009270:0.008566:0.005470:0.008566:0.004488:0.014102:0.003964:0.006944:0.006944:0.003964:0.009270:0.009647:0.004488:0.007565:0.008336:0.003964:0.009270:0.008566:0.006944:0.004488:0.007567:0.008336:0.009270:0.004488:0.009630:0.008566:0.004488:0.003964:0.009270:0.005126:0.008566:0.005700:0.005462:0.008566:0.009647:0.004488:0.005126:0.005474:0.009598:0.014102:0.004488:0.009270:0.008566:0.003964:0.009647:0.009270:0.009630:0.009598:0.009270:0.005700:0.003964:0.009270:0.009647:0.004488:0.007539:0.008336:0.003964:0.009270:0.008566:0.006944:0.003554
Program 54: To fill the missing value in the DataFrame:@0.100630:0.227592:0.518113:0.227592:0.518113:0.210945:0.100630:0.210945:0.010056:0.006458:0.010007:0.010138:0.006519:0.008811:0.015002:0.004520:0.009417:0.009417:0.004438:0.004520:0.008137:0.010007:0.004520:0.006273:0.004651:0.004651:0.004651:0.004520:0.006371:0.009860:0.008861:0.004520:0.015002:0.004651:0.007206:0.007206:0.004651:0.009909:0.010138:0.004520:0.008649:0.008811:0.004651:0.009909:0.008861:0.004520:0.004651:0.009909:0.004520:0.006371:0.009860:0.008861:0.004520:0.012071:0.008811:0.006371:0.008811:0.008517:0.006519:0.008811:0.015002:0.008861
import pandas as pd:@0.124378:0.256584:0.314037:0.256584:0.314037:0.242305:0.124378:0.242305:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
import numpy as np:@0.124378:0.274884:0.304047:0.274884:0.304047:0.260605:0.124378:0.260605:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
# Define a dictionary containing data with some missing values:@0.124378:0.296756:0.743636:0.296756:0.743636:0.282477:0.124378:0.282477:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
data = {:@0.124378:0.318628:0.204140:0.318628:0.204140:0.304349:0.124378:0.304349:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
    'Name': ['Adit', 'Ekam', 'Sakshi', 'Anu'],:@0.124378:0.340499:0.583786:0.340499:0.583786:0.326220:0.124378:0.326220:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
    'Age': [27, np.nan, 25, 30],:@0.124378:0.362371:0.443916:0.362371:0.443916:0.348092:0.124378:0.348092:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
    'Address': ['Delhi', 'Kanpur', np.nan, 'Indore'],:@0.124378:0.384243:0.653720:0.384243:0.653720:0.369964:0.124378:0.369964:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
    'Qualification': ['M.Sc.', 'MA', 'MCA', 'Ph.D.']:@0.124378:0.406115:0.643730:0.406115:0.643730:0.391836:0.124378:0.391836:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
}:@0.124378:0.424415:0.134205:0.424415:0.134205:0.410136:0.124378:0.410136:0.009827
# Convert the dictionary into a DataFrame:@0.124378:0.446287:0.533832:0.446287:0.533832:0.432008:0.124378:0.432008:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
df = pd.DataFrame(data):@0.124378:0.469951:0.354000:0.469951:0.354000:0.455672:0.124378:0.455672:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
# Display the original DataFrame:@0.124378:0.493615:0.443916:0.493615:0.443916:0.479336:0.124378:0.479336:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
print(\Original DataFrame:\):@0.124378:0.517279:0.403954:0.517279:0.403954:0.503000:0.124378:0.503000:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
print(df):@0.124378:0.540943:0.214131:0.540943:0.214131:0.526664:0.124378:0.526664:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
# Finding any missing value in a column:@0.124378:0.564607:0.513851:0.564607:0.513851:0.550328:0.124378:0.550328:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
print(\\nMissing values in each column:\):@0.124378:0.588271:0.533832:0.588271:0.533832:0.573992:0.124378:0.573992:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
print(df.isnull().sum()):@0.124378:0.611935:0.363991:0.611935:0.363991:0.597656:0.124378:0.597656:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
# Finding the total number of NaN values:@0.124378:0.635599:0.523842:0.635599:0.523842:0.621320:0.124378:0.621320:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
print(\\nTotal number of NaN values:\):@0.124378:0.659263:0.503860:0.659263:0.503860:0.644984:0.124378:0.644984:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
print(df.isnull().sum().sum()):@0.124378:0.682927:0.423935:0.682927:0.423935:0.668648:0.124378:0.668648:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
# Deleting entire row with NaN values:@0.124378:0.706591:0.493870:0.706591:0.493870:0.692312:0.124378:0.692312:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
df_dropped = df.dropna():@0.124378:0.730255:0.363991:0.730255:0.363991:0.715976:0.124378:0.715976:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
print(\\nDataFrame after dropping rows with NaN values:\):@0.124378:0.753919:0.693683:0.753919:0.693683:0.739640:0.124378:0.739640:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
print(df_dropped):@0.124378:0.777583:0.294056:0.777583:0.294056:0.763304:0.124378:0.763304:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
# Filling NaN values with mean in the 'Age' column and 'Chennai' in the 'Address' :@0.124378:0.801247:0.951313:0.801247:0.951313:0.786968:0.124378:0.786968:0.009991:0.010564:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.010564:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009829:0.009827
column:@0.124378:0.819547:0.184159:0.819547:0.184159:0.805268:0.124378:0.805268:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
# The mean value is rounded to an integer:@0.124378:0.843211:0.533832:0.843211:0.533832:0.828932:0.124378:0.828932:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
df_filled = df.fillna({'Age': round(df['Age'].mean()), 'Address': 'Chennai'}):@0.124378:0.866875:0.893496:0.866875:0.893496:0.852596:0.124378:0.852596:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
print(\\nDataFrame after filling NaN values:\):@0.124378:0.890539:0.583786:0.890539:0.583786:0.876260:0.124378:0.876260:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827
print(df_filled):@0.124378:0.914203:0.284065:0.914203:0.284065:0.899924:0.124378:0.899924:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009991:0.009827